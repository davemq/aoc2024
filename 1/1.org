* 1A

** Require seq

seq is required for doing the distance calculations across the two lists.

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'seq)
#+end_src

** Define 1a function

#+begin_src emacs-lisp :tangle yes :comments both
  (defun 1a ()
#+end_src

** Local variables

Set left and right to nil.

#+begin_src emacs-lisp :tangle yes :comments both
  (let
      (
       left
       right
       )
#+end_src

** Read file into buffer

#+begin_src emacs-lisp :tangle yes :comments both
  (find-file "input.txt")
#+end_src

** Loop over lines

Loop over lines
- split lines
- append 0th value to left
- append 1st value to right

#+begin_src emacs-lisp :tangle yes :comments both
  (dolist (l (string-lines (buffer-string)))
    (let (
	      (values (split-string l))
	      )
      (setq left (append left (list (string-to-number (nth 0 values)))))
      (setq right (append right (list (string-to-number (nth 1 values)))))
      )
    )
#+end_src

** Sort lists

Use sort

#+begin_src emacs-lisp :tangle yes :comments both
  (setq left (sort left))
  (setq right (sort right))
#+end_src

** Compute distances and sum

Use
- seq-mapn with lambda of abs of the difference
- seq-reduce with +

Need to require seq (above).

#+begin_src emacs-lisp :tangle yes :comments both
  (seq-reduce #'+ (seq-mapn (lambda (i j) 
				  "Return distance between two integers."
				  (abs (- i j))
				  )
				left right) 0)
#+end_src

** End
#+begin_src emacs-lisp :tangle yes :comments both
   )
  )
#+end_src

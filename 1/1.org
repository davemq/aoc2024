* 1A

** Require seq

seq is required for doing the distance calculations across the two lists.

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'seq)
#+end_src

** Define globals

#+begin_src emacs-lisp :tangle yes :comments both
  (defvar left nil)
  (defvar right nil)
#+end_src

** Define 1a function

#+begin_src emacs-lisp :tangle yes :comments both
  (defun 1a ()
#+end_src

** Reset left and right

#+begin_src emacs-lisp :tangle yes :comments both
  (setq left nil)
  (setq right nil)
#+end_src

** Read file into buffer

#+begin_src emacs-lisp :tangle yes :comments both
  (find-file "input.txt")
#+end_src

** Loop over lines

Loop over lines
- split lines
- append 0th value to left
- append 1st value to right

#+begin_src emacs-lisp :tangle yes :comments both
  (dolist (l (string-lines (buffer-string)))
    (let (
		(values (split-string l))
		)
      (setq left (append left (list (string-to-number (nth 0 values)))))
      (setq right (append right (list (string-to-number (nth 1 values)))))
      )
    )
#+end_src

** Sort lists

Use sort

#+begin_src emacs-lisp :tangle yes :comments both
  (setq left (sort left))
  (setq right (sort right))
#+end_src

** Compute distances and sum

Use
- seq-mapn with lambda of abs of the difference
- seq-reduce with +

Need to require seq (above).

#+begin_src emacs-lisp :tangle yes :comments both
  (seq-reduce #'+ (seq-mapn (lambda (i j) 
				    "Return distance between two integers."
				    (abs (- i j))
				    )
				  left right) 0)
#+end_src

** End
#+begin_src emacs-lisp :tangle yes :comments both
  )
#+end_src

* 1B

Calculate a total similarity score by adding up each number in the
left list after multiplying it by the number of times that number
appears in the right list.

** Define function 1b

#+begin_src emacs-lisp :tangle yes :comments both
  (defun 1b ()
#+end_src

** Call 1a to compute left and right lists

#+begin_src emacs-lisp :tangle yes :comments both
  (1a)
#+end_src

For each element of left, multiply by the result of seq-count using (- element)
as the predicate.

#+begin_src emacs-lisp :tangle yes :comments both
  (seq-reduce #'+ 
  	    (mapcar (lambda (x) (* x (seq-count (lambda (elt) (= elt x)) right))) left)
  	    0)
#+end_src

** End function 1b

#+begin_src emacs-lisp :tangle yes :comments both
  )
#+end_src

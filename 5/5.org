* 5a

The first section specifies the page ordering rules, one per line. The
first rule, 47|53, means that if an update includes both page number
47 and page number 53, then page number 47 must be printed at some
point before page number 53. (47 doesn't necessarily need to be
immediately before 53; other pages are allowed to be between them.)

The second section specifies the page numbers of each update. Because
most safety manuals are different, the pages needed in the updates are
different too. The first update, 75,47,61,53,29, means that the update
consists of page numbers 75, 47, 61, 53, and 29.

To get the printers going as soon as possible, start by identifying
which updates are already in the right order.

For some reason, the Elves also need to know the middle page number of
each update being printed. Because you are currently only printing the
correctly-ordered updates, you will need to find the middle page
number of each correctly-ordered update. In the above example, the
correctly-ordered updates are:

#+begin_example
75,47,61,53,29
97,61,53,29,13
75,29,13
#+end_example

These have middle page numbers of 61, 53, and 29 respectively. Adding
these page numbers together gives 143.

Of course, you'll need to be careful: the actual list of page ordering
rules is bigger and more complicated than the above example.

Determine which updates are already in the correct order. What do you
get if you add up the middle page number from those correctly-ordered
updates?

** Ideas

I thought about trying to sort these numbers somehow. Its pretty easy
if the numbers are new, but if they're already in the list and in the
wrong place, how do you fix it? I saw a mention of topological sorting
in r/adventofcode, along with some related terms. But I don't yet
understand those things, so I'll try it my way. I suspect it will
amount to the same thing.

Another thought was a hash list based on the first number, having the
first number as the key and the list of "after" pages as the value.

A similar idea is a property list or association list. I settled on
property list as the better of these.

For the first part of the file, I could parse a couple of ways. First
is

- if the key (first number) isn't in the plist, add it with the second
  number in a list as the key
- if the key is in the plist, add the second number to the list,
  i.e. the property

For the second part, we probably need to start at the last element of
the list and work backwards, making sure previous elements aren't
supposed to be later numbers. I might be able to just check against
the previous element.

Alternatively, starting with the first element, check that the next
element is explicitly after the current element, and that the current
element is /not/ after the next element.

For those lists where the conditions are satisfied, find the middle
element and add it to the total.


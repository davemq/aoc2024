* 5a

The first section specifies the page ordering rules, one per line. The
first rule, 47|53, means that if an update includes both page number
47 and page number 53, then page number 47 must be printed at some
point before page number 53. (47 doesn't necessarily need to be
immediately before 53; other pages are allowed to be between them.)

The second section specifies the page numbers of each update. Because
most safety manuals are different, the pages needed in the updates are
different too. The first update, 75,47,61,53,29, means that the update
consists of page numbers 75, 47, 61, 53, and 29.

To get the printers going as soon as possible, start by identifying
which updates are already in the right order.

For some reason, the Elves also need to know the middle page number of
each update being printed. Because you are currently only printing the
correctly-ordered updates, you will need to find the middle page
number of each correctly-ordered update. In the above example, the
correctly-ordered updates are:

#+begin_example
75,47,61,53,29
97,61,53,29,13
75,29,13
#+end_example

These have middle page numbers of 61, 53, and 29 respectively. Adding
these page numbers together gives 143.

Of course, you'll need to be careful: the actual list of page ordering
rules is bigger and more complicated than the above example.

Determine which updates are already in the correct order. What do you
get if you add up the middle page number from those correctly-ordered
updates?

** Ideas

I thought about trying to sort these numbers somehow. Its pretty easy
if the numbers are new, but if they're already in the list and in the
wrong place, how do you fix it? I saw a mention of topological sorting
in r/adventofcode, along with some related terms. But I don't yet
understand those things, so I'll try it my way. I suspect it will
amount to the same thing.

Another thought was a hash list based on the first number, having the
first number as the key and the list of "after" pages as the value.

A similar idea is a property list or association list. I settled on
property list as the better of these.

For the first part of the file, I could parse a couple of ways. First
is

- if the key (first number) isn't in the plist, add it with the second
  number in a list as the key
- if the key is in the plist, add the second number to the list,
  i.e. the property

For the second part, we probably need to start at the last element of
the list and work backwards, making sure previous elements aren't
supposed to be later numbers. I might be able to just check against
the previous element.

Alternatively, starting with the first element, check that the next
element is explicitly after the current element, and that the current
element is /not/ after the next element.

For those lists where the conditions are satisfied, find the middle
element and add it to the total.

** Code

*** Start function and read file

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'cl-lib)
  (defun 5a ()
    "Day 5, part 1."
    (find-file "input.txt")
    (setq str (buffer-string))
#+end_src

*** Parse page ordering rules

First, create a regexp for the pageorder, which is

page|page

where page is 2 digits in each case. We /could/ make this even more
tight by noticing that the digits are really only [1-9], but this
works.

#+begin_src emacs-lisp :tangle yes :comments both
  (setq pageorder
        (rx
         (group 
  	(repeat 2 (in digit))
  	)
         "|"
         (group
  	(repeat 2 (in digit))
  	)
         )
        )
#+end_src

Set the string match offset to 0 and create an empty property list
"p".

#+begin_src emacs-lisp :tangle yes :comments both
  (setq offset 0)
  (setq p (list))
#+end_src

Finally, loop through the first section until we stop getting matches,
and put the information into the property list.

#+begin_src emacs-lisp :tangle yes :comments both
  (while
      (string-match pageorder str offset)
    (setq m (match-data))
    (setq offset (nth 1 m))
    (setq first (string-to-number (match-string 1 str)))
    (setq second (string-to-number (match-string 2 str)))
    (setq p1 (plist-get p first))
    (if (not p1)
        (setq p1 (list)))
    (push second p1)
    (setq p (plist-put p first p1))
    )
#+end_src

*** Page list processing

For the next part, we can either do steps for all of the page lists,
i.e. parse them all, check them all, find the middle element for all
valid one, sum them up.

Alternatively, for each line, we could
- parse
- if valid
  - find middle element
  - add to sum

Parsing is pretty easy.
- get the second part of the file with (substring str (1+ offset))
- split into lines
- for each line split into a list with "," as the separator

#+begin_src emacs-lisp :tangle yes :comments both
  (setq lines (string-lines (substring str (+ 2 offset))))
  (setq lists (mapcar (lambda (l) (split-string l ",")) lines))
  (defun s2n (l)
    "Map a list of strings to a list of numbers."
    (mapcar #'string-to-number l))
  (setq lists (mapcar #'s2n lists))
#+end_src

For each list item
- get reverse of item
- check for presense of each member of (cdr (reverse item)) in the
  property list for (car (reverse item))
- if length of (cdr (reverse item)) > 1
  - run checks again with list as (cdr (reverse item)), i.e. recurse

#+begin_src emacs-lisp :tangle yes :comments both
  (defun valid (l)
    "Determine whether page order list is valid."
    (let ((pl (plist-get p (car l)))
  	(result t))
      (dolist (item (cdr l) result)
        (setq result (and result (not (memq item pl)))))
      (if (and result
  	     (> (length (cdr l)) 1)
  	     )
  	(setq result (valid (cdr l)))
        )
      result
      )
    )
#+end_src

For the middle, we assume the length of the page order is odd.
Use (signal 'wrong-number-of-arguments list) to signal a bad
assumption.

Remember elements of a list start at 0. So the middle of a 3 element
list is position 1, the middle of a 5 element list, position 2, etc.

Otherwise, the length of the page order list is odd, so middle is
(/ (1- (length (page order list))) 2)

#+begin_src emacs-lisp :tangle yes :comments both
  (defun middle (l)
    "Compute middle element of list."
    (setq len (length l))
    (if (cl-evenp len)
        (signal 'wrong-number-of-arguments l))
    (/ (1- len) 2)
    )
#+end_src

Add up the middle page numbers from valid page order lists.

#+begin_src emacs-lisp :tangle yes :comments both
  (setq sum 0)
  (dolist (l lists sum)
    (if (valid (reverse l))
        (setq sum (+ sum (nth (middle l) l)))))
#+end_src

*** End function

#+begin_src emacs-lisp :tangle yes :comments both
  sum
  )
#+end_src

* 5b

For each of the incorrectly-ordered updates, use the page ordering
rules to put the page numbers in the right order. For the above
example, here are the three incorrectly-ordered updates and their
correct orderings:

75,97,47,61,53 becomes 97,75,47,61,53.
61,13,29 becomes 61,29,13.
97,13,75,29,47 becomes 97,75,47,29,13.

After taking only the incorrectly-ordered updates and ordering them
correctly, their middle page numbers are 47, 29, and 47. Adding these
together produces 123.

Find the updates which are not in the correct order. What do you get
if you add up the middle page numbers after correctly ordering just
those updates?

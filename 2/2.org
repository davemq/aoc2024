* 2A

The engineers are trying to figure out which reports are safe. The
Red-Nosed reactor safety systems can only tolerate levels that are
either gradually increasing or gradually decreasing. So, a report only
counts as safe if both of the following are true:

- The levels are either all increasing or all decreasing.
- Any two adjacent levels differ by at least one and at most three.

** Requires

Require seq.

#+begin_src emacs-lisp :tangle yes :comments both
(require 'seq)
#+end_src

** Define safe function

Constraints:
- length of list is greater than 2
- first two elements must not be equal
- the list is all ascending or all descending
- adjacent levels differ by 1, 2 or 3

Here's the safe function.

#+begin_src emacs-lisp :tangle yes :comments both
(defun safe (l)
  (and
   (length> l 1)
   (/= (car l) (cadr l))
   (or
    (ascending l)
    (descending l)
    )
   (safe-distance l)
   )
  )
#+end_src

*** ascending function

Quite simple use of apply with #'<.

#+begin_src emacs-lisp :tangle yes :comments both
  (defun ascending (l)
    (apply #'< l))
#+end_src

*** descending function

Apply with #'>.

#+begin_src emacs-lisp :tangle yes :comments both
  (defun descending (l)
    (apply #'> l))
#+end_src

*** Check distance function

This needs to walk through the list, checking whether distances
between items is 1 <= distance <= 3.

Distance function is something like

#+begin_src emacs-lisp :tangle yes :comments both
  (defun distance (i j)
    (abs (- i j)))
#+end_src

Checking distance will be with a while loop, from element at index 1
(list element indices start at 0) to the last element, with something
like

#+begin_src emacs-lisp :tangle yes :comments both
  (defun safe-distance (l)
    (setq ok t)
    (let ((idx 1)
	  (len (length l))
	  )
      (while (and ok (< idx len))
	(let ((d (distance (nth idx l) (nth (1- idx) l))))
	  (setq ok (and (> d 0) (< d 4)))
	  (setq idx (1+ idx))
	  )
	)
      )
    ok
    )
#+end_src

** Convert list of string to list of numbers

#+begin_src emacs-lisp  :tangle yes :comments both
(defun s2n (l)
  (mapcar #'string-to-number l))
#+end_src

** 2A

Read file into buffer

#+begin_src emacs-lisp  :tangle yes :comments both
  (defun 2a ()
    (find-file "input.txt")
#+end_src

- Get the lines
- For each line, split into a list of strings
  - For each string, convert to a number
  - Test to see if list is safe

Need to do something with dolist and mapcar #'string-to-numbers.

*** Get lines

#+begin_src emacs-lisp  :tangle yes :comments both
  (setq lines (string-lines (buffer-string)))
#+end_src

*** Split each line into lists of strings

#+begin_src emacs-lisp  :tangle yes :comments both
  (setq lists (mapcar #'split-string lines))
#+end_src

*** Convert strings to numbers

#+begin_src emacs-lisp  :tangle yes :comments both
(setq lists (mapcar #'s2n lists))
#+end_src

*** How many reports are safe?

#+begin_src emacs-lisp  :tangle yes :comments both
(seq-count #'safe lists)
#+end_src

*** End of 2A

#+begin_src emacs-lisp  :tangle yes :comments both
  )
#+end_src

* 2B

The Problem Dampener is a reactor-mounted module that lets the reactor
safety systems tolerate a single bad level in what would otherwise be
a safe report. It's like the bad level never happened!

Now, the same rules apply as before, except if removing a single level
from an unsafe report would make it safe, the report instead counts as
safe.

Update your analysis by handling situations where the Problem Dampener
can remove a single level from unsafe reports. How many reports are
now safe?

** Idea

For unsafe reports, walk through the list, removing an item at a time
until either you get a safe report or you've tried all items. Kind of
like

#+begin_example
set index 0
while not safe and index < (length (list)
    create list without the element at this index
    test for safety with original safe algorithm
    increment index
#+end_example

This could be implemented as a separate dampener function.

** Dampener

To create a list from the original list but without an element at a
particular position, we can use seq-remove-at-position.

#+begin_src emacs-lisp  :tangle yes :comments both
(defun dampened-safe (l)
  (setq safety (safe l))
  (let ((idx 0)
	(len (safe-length l))
	)
    (while (and
	    (not safety)
	    (< idx len)
	    )
      (setq candlist (seq-remove-at-position l idx))
      (setq safety (safe candlist))
      (setq idx (1+ idx))
      )
    )
    safety
  )
#+end_src

** 2B function

2b should be like 2a but call dampened-safe instead of safe. Have 2b
run 2a to set up lists and then use seq-count with dampened-safe.

#+begin_src emacs-lisp  :tangle yes :comments both
(defun 2b ()
  (2a)
  (seq-count #'dampened-safe lists)
  )
#+end_src

* 2A

The engineers are trying to figure out which reports are safe. The
Red-Nosed reactor safety systems can only tolerate levels that are
either gradually increasing or gradually decreasing. So, a report only
counts as safe if both of the following are true:

- The levels are either all increasing or all decreasing.
- Any two adjacent levels differ by at least one and at most three.

** Define safe function

Constraints:
- length of list is greater than 2
- first two elements must not be equal
- the list is all ascending or all descending
- adjacent levels differ by 1, 2 or 3

Here's the safe function so far.

#+begin_src emacs-lisp :tangle yes :comments both
  ;; (defun 2a ()
  ;;   (find-file "input.txt")
#+end_src

*** ascending function

Quite simple use of apply with #'<.

#+begin_src emacs-lisp :tangle yes :comments both
  (defun ascending (l)
    (apply #'< l))
#+end_src

*** descending function

Apply with #'>.

#+begin_src emacs-lisp :tangle yes :comments both
  (defun descending (l)
    (apply #'> l))
#+end_src

*** Check distance function

This needs to walk through the list, checking whether distances
between items is 1 <= distance <= 3.

Distance function is something like

#+begin_src emacs-lisp :tangle yes :comments both
  (defun distance (i j)
    (abs (- i j)))
#+end_src

Checking distance will be with a while loop, from element at index 1
(list element indices start at 0) to the last element, with something
like

#+begin_src emacs-lisp :tangle yes :comments both
  (defun safe-distance (l)
    (setq idx 1)
    (setq len (length l))
    (setq ok t)
    (while (and ok (< idx len))
      (let ((d (distance (nth idx l) (nth (1- idx) l))))
	(setq ok (and (> d 0) (< d 4)))
	(setq idx (1+ idx))
	)
      )
    ok
    )
#+end_src

** 2A

Read file into buffer

#+begin_src emacs-lisp  :tangle yes :comments both
  ;; (defun 2a ()
  ;;   (find-file "input.txt")
#+end_src

- Get the lines
- For each line, split into a list of strings
  - For each string, convert to a number
  - Test to see if list is safe

Need to do something with dolist and mapcar #'string-to-numbers.

* 4a

This word search allows words to be horizontal, vertical, diagonal,
written backwards, or even overlapping other words. It's a little
unusual, though, as you don't merely need to find one instance of
XMAS - you need to find all of them.

Take a look at the little Elf's word search. How many times does XMAS
appear?

** Idea

So the search will have to go 8 directions:
- left to right
- right to left
- top to bottom
- bottom to top
- diagonal NE to SW
- diagonal SW to NE
- diagonal NW to SE
- diagonal SE to NW

And of course, every row, column and diagonal in each direction. Phew!

String search from left to right should be relatively easy, just use
normal string searching on each line.

If you search within the buffer, rather than the buffer string, you
can use search-forward and search-backward. Regular expression
searching can search strings. So we can slice and dice the buffer
string a few ways, use reverse to get strings to search backwards. It
will probably be easier to do all directions this way:

- Cut up (buffer-string) the appropriate way into a list of
  strings. Horizontal lines are the easiest.
- Search the strings forwards.
- Search the (reverse string), i.e. search backwards.

Of course, keep a total count.

One idea for horizontal is to how how-many to count occurrences of
XMAS and SAMX. One could do the SAMX trick for all directions, and
forget about using reverse!

For vertical and diagonal searches, I don't know if it will be more
efficient to build a list of strings for each, and use regexp search
on those strings, or just search directly by accessing the individual
characters. I /think/ it is more straightforward and reliable to just
create the strings and search them.

*** Horizontal

Create line strings from buffer string using string-lines and search them
for XMAS and SAMX.

Maybe skip creating lines and just search thought the buffer string.

*** Vertical

Get horizontal line length from first string in the horizontal strings
list.

For each index from 0 to length of line - 1, grab the index'th
character from each line to create a vertical line. The grid looks to
be 140 Ã— 140, so as a check, we should have 140 verticals lines of 140
characters each.

Once created, search for XMAS and SAMX in each string.

*** Diagonals

We should get 279 lines each from the NE-SW and NW-SE diagonals. A few
of the lines will be too short to hold XMAS or SAMX.

Then search for XMAS and SAMX in each string.

* 4a function

#+begin_src emacs-lisp :tangle yes :comments both
  (defun 4a ()
    (find-file "input.txt")
    (setq str (buffer-string))
    (setq xmas (rx "XMAS"))
    (setq samx (rx "SAMX"))
    (setq total 0)
    (setq offset 0)
#+end_src

** Create lines

#+begin_src emacs-lisp :tangle yes :comments both
  (setq lines (string-lines str))
#+end_src

** Horizontal
*** Search forwards

Just loop over str for "XMAS", calling string-match until it returns
nil.

#+begin_src emacs-lisp :tangle yes :comments both
  (setq offset 0)
  (while (string-match xmas str offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
#+end_src

*** Search backwards

Loop over str for "SAMX".

#+begin_src emacs-lisp :tangle yes :comments both
  (setq offset 0)
  (while (string-match samx str offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
#+end_src

** Vertical

Strings made up of a single character of each line can be created with
something like this:

#+begin_src emacs-lisp :tangle no
(mapconcat (lambda (l) (substring l 0 1)) lines)
#+end_src

The indices for the substring will then have to run from 0 to the
length of the strings minus one, which happens to be 140 - 1 = 139.
Could also then search each string for XMAS and SAMX just after
they're created, adding to the totals.

*** Create vertical lines and search

#+begin_src emacs-lisp :tangle yes :comments both
  (setq i 0)
  (setq len (length (car lines)))
  (while (< i len)
    (setq v (mapconcat (lambda (l) (substring l i (1+ i))) lines))
    (setq offset 0)
    (while (string-match xmas v offset)
      (setq offset (cadr (match-data)))
      (setq total (1+ total)))
    (setq offset 0)
    (while (string-match samx v offset)
      (setq offset (cadr (match-data)))
      (setq total (1+ total))
      )
    (setq i (1+ i))
    )
#+end_src

** NW-SE diagonal

We want to create strings from the lines from the buffer, starting
with 
- last line, 0th character
- (second to last line, 0th character) + (last lines, 1st character)

or

- (139, 0)
- (138, 0) + (139, 1)
- (137, 0) + (138, 1) + (139, 2)
  down to
- (0, 0) + (1, 1) + (2, 2) + ... + (139,139)

Then march down the first line:

- (0, 1) + (1, 2) + (2, 3) + ... + (138, 139)
- (0, 2) + (1, 3) + (2, 4) + ... + (137, 139)
  down to
- (0, 139)


*** Code for NW-SE, part 1

#+begin_src emacs-lisp :tangle yes :comments both
(setq rows (length lines))
(setq startrow (1- (length lines)))
(while (> startrow 0)
  (setq diagonal "")
  (setq r startrow)
  (setq col 0)
  (while (< r rows)
    (setq diagonal (concat diagonal (substring (nth r lines) col (1+ col))))
    (setq r (1+ r))
    (setq col (1+ col))
    )
  ;; now diagonal should contain a string from the NW-SE diagonal
  (setq offset 0)
  (while (string-match xmas diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total)))
  (setq offset 0)
  (while (string-match samx diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total)))

  (setq startrow (1- startrow))
  )
#+end_src

*** Code for NW-SE, part 2

This part starts at (0,0), moving across row 0 starting at (0,0), then
starting at (0, 1), etc.

#+begin_src emacs-lisp :tangle yes :comments both
(setq cols (length (cadr lines)))
(setq startcol 0)
(while (< startcol cols)
  (setq row 0)
  (setq col startcol)
  (setq diagonal "")
  (while (< col cols)
    (setq diagonal (concat diagonal (substring (nth row lines) col (1+ col))))
    (setq row (1+ row))
    (setq col (1+ col))
    )
  (setq offset 0)
  (while (string-match xmas diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
  (setq offset 0)
  (while (string-match samx diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
  (setq startcol (1+ startcol))
  )
#+end_src


** NE-SW diagonal

*** Part 1

Here start out the opposite of NW-SE, sweeping across row 0, starting
from columns 0 to 139, adding 1 to row and subtracting 1 from the
column. So in this case stop when col reaches 0.

#+begin_src emacs-lisp :tangle yes :comments both
(setq rows (length lines))
(setq cols (length (car lines)))
(setq startcol 0)
(while (< startcol cols)
  (setq diagonal "")
  (setq col startcol)
  (setq row 0)
  (while (>= col 0)
    (print (format "%d,%d" row col))
    (setq diagonal (concat diagonal (substring (nth row lines) col (1+ col))))
    (setq col (1- col))
    (setq row (1+ row))
    )
  (print "")
  (setq offset 0)
  (while (string-match xmas diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
  (setq offset 0)
  (while (string-match samx diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
  (setq startcol (1+ startcol))
  )
#+end_src

*** Part 2

Now walk down the rows, from row 1 to 139, column 139 to 0

#+begin_src emacs-lisp :tangle yes :comments both
(setq startrow 1)
(while (< startrow rows)
  (setq row startrow)
  (setq col (1- cols))
  (setq diagonal "")
  (while (< row rows)
    (setq diagonal (concat diagonal (substring (nth row lines) col (1+ col))))
    (setq row (1+ row))
    (setq col (1- col))
    )
  (setq offset 0)
  (while (string-match xmas diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
  (setq offset 0)
  (while (string-match samx diagonal offset)
    (setq offset (cadr (match-data)))
    (setq total (1+ total))
    )
  (setq startrow (1+ startrow))
  )
#+end_src


** End

#+begin_src emacs-lisp :tangle yes :comments both
  total
  )
#+end_src

* 4b

We're searching for X-MAS instead, in which you're supposed to find
two MAS in the shape of an X, like this:

#+begin_example
M.S
.A.
M.S
#+end_example

Another example is

#+begin_example
.M.S......
..A..MSMS.
.M.S.MAA..
..A.ASMSM.
.M.S.M....
..........
S.S.S.S.S.
.A.A.A.A..
M.M.M.M.M.
..........
#+end_example

which has 9 X-MASes.

** Thoughts and ideas

The way I did 4a doesn't easily lend itself to this exercise. I'd
really like a 2d array of the characters of the strings. The diagonal
strings are helpful, and certainly walking through the strings is
helpful.

But I'm thinking another way might be to use regular expressions
across three consecutive strings. It's a little tricky. So I could do
something like these regular expressions on substrings from the same
starting starting locations in each string:

- "\([MS]\).\([MS]\)
- .A.
- This one is tricky.
  - If \2 from the first string is M, use S for our first letter,
    otherwise use M.
  - If \1 from the first string is M, use S for our second letter,
    otherwise use M.

Or, I could spell out all the valid combos:
- M.M
  .A.
  S.S
- M.S
  .A.
  M.S
- S.M
  .A.
  S.M
- S.S
  .A.
  M.M

This latter idea is very brute force, and require more searches. I
think I prefer the first idea, as it requires fewer searches.

** Code for 4b

*** Front matter

#+begin_src emacs-lisp :tangle yes :comments both
(defun 4b ()
  (find-file "input.txt")
  (setq str (buffer-string))
  (setq lines (string-lines str))
  (setq len (length lines))
  (setq total 0)
  (setq first-re
	(rx
	 (group
	  (any "MS")
	  )
	 anything
	 (group
	  (any "MS")
	  )
	 )
	)
  (setq second-re (rx bol
		      anything
		      "A" 
		      anything
		      )
	)
#+end_src

*** Walk through lines

set first to line 0
set second to line 1
set third to line 2
While first line runs from 0 to len - 2
do
    while search for first-re matches
    do
        pull out position of start of match
        pull out match data for new offset
	pull out group 1 string
	pull out group 2 string

	search second for second-re at same position as start of match
	if a match
	do
	    construct third-re from 
	    - opposite for group 2 string
	    - anything
	    - opposite for group 1 string

	    search for third-re at start of first match position
	    if a match
	    do
	        increment total
	    done
	done
    done

    increment first line counter
    set first line to second line
    set second line to third line
    get new third line from position first line+2
done

#+begin_src emacs-lisp :tangle yes :comments both
(setq firstlineno 0)
(setq first (nth firstlineno lines))
(setq second (nth (1+ firstlineno) lines))
(setq third (nth (+ 2 firstlineno) lines))

(while (< firstlineno (- len 2))
  (setq offset 0)
  (while (string-match first-re first offset)
    (setq m (match-data))
    (setq pos (car m))
    (setq offset (cadr m))
    (setq g1 (match-string 1 first))
    (setq g2 (match-string 2 first))

    (if (string-match second-re second pos)
	;;; now construct third-re
	(progn
	  (setq third-re (rx
			  bol
			  (regexp 
			   (if (string-equal g2 "M") 
			       "S"
			     "M")
			   )
			  anything
			  (regexp 
			   (if (string-equal g1 "M")
			       "S"
			     "M")
			   )
			  )
		)
	  (if (string-match third-re third pos)
	      (setq total (1+ total))
	    )
	  )
      )
    )

  (setq firstlineno (1+ firstlineno))
  (setq first second)
  (setq second third)
  (setq third (nth (+ firstlineno 2) lines))
  )
#+end_src

*** Return total

#+begin_src emacs-lisp :tangle yes :comments both
total
)
#+end_src
